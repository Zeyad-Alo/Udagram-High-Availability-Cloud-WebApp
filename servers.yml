Description: >
  CloudFormation template for provisioning Udagram's servers.



Parameters:

  EnvironmentName:
    Type: String

  AMIid:
    Type: String




Resources:

  S3AccessIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  S3AccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref S3AccessIAMRole


  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to all instances
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to and from load balancer
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID


  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: 10
      IamInstanceProfile: !Ref S3AccessInstanceProfile
      ImageId: !Ref AMIid
      InstanceType: t2.medium
      KeyName: EC2_KEY
      SecurityGroups:
        - !Ref WebServerSG
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://my8104bucket/temp.webp .
          aws s3 cp s3://my8104bucket/index.html .

  WebappAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: "4"
      MinSize: "4"
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PVT-NETS
  

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref LoadBalancerSG
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-NET-AZ1
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-NET-AZ2

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions: # Required
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions: # Required
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
  
Outputs:

  LoadBalacerDNS:
    Description: LoadBalancer's DNS access point
    Value: !Join [ "", ["http://", !GetAtt LoadBalancer.DNSName] ]
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNS